#!/usr/bin/env python3
"""
Ejemplo b√°sico de uso de AsyncFileLock

Este ejemplo muestra el uso m√°s simple de la clase AsyncFileLock
usando el contexto 'async with' para garantizar la liberaci√≥n autom√°tica del lock.
"""

import sys
import os
import asyncio

# Agregar la carpeta src al path para importar
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', 'src'))

from simple_filelock_async import AsyncFileLock


async def tarea_con_lock():
    """Tarea que requiere acceso exclusivo a un recurso"""
    lockfile_path = "/tmp/ejemplo_async_basico.lock"
    
    print(f"Usando lockfile: {lockfile_path}")
    
    try:
        # Uso b√°sico con async context manager
        async with AsyncFileLock(lockfile_path, debug=True):
            print("üîí Lock adquirido - ejecutando secci√≥n cr√≠tica as√≠ncrona...")
            print("Simulando trabajo as√≠ncrono que requiere exclusividad mutua...")
            
            # Simular trabajo as√≠ncrono
            await asyncio.sleep(3)
            
            print("‚úÖ Trabajo as√≠ncrono completado")
        
        print("üîì Lock liberado autom√°ticamente al salir del contexto")
        
    except TimeoutError as e:
        print(f"‚ùå Error de timeout: {e}")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")


async def main():
    print("=== Ejemplo B√°sico de AsyncFileLock ===")
    await tarea_con_lock()


if __name__ == "__main__":
    asyncio.run(main())